import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

def jarVersion = "1.0.0"
group = 'io.nats'

def isPr = System.getenv("BUILD_TYPE") == "PR"
def isMerge = System.getenv("BUILD_TYPE") == "MERGE"
def isRelease = System.getenv("BUILD_TYPE") == "RELEASE"

// version is the variable the build actually uses.
version = isPr || isMerge ? jarVersion + "-SNAPSHOT" : jarVersion

// Get signing properties set up from outside (env var can't handle the dot)
if (System.getenv('OSSRH_USERNAME') != null) {
    project.ext['ossrhUsername'] = System.getenv('OSSRH_USERNAME')
    project.ext['ossrhPassword'] = System.getenv('OSSRH_PASSWORD')
    project.ext['signing.secretKeyRingFile'] = System.getenv('GPG_KEYRING_FILE')
    project.ext['signing.keyId'] = System.getenv('GPG_KEY_ID')
    project.ext['signing.password'] =  System.getenv('GPG_KEY_PASSPHRASE')
}

// If these aren't set, just set them to empty so we don't have issues getting them
if (!project.hasProperty('ossrhUsername')) {
    project.ext['ossrhUsername'] = ""
    project.ext['ossrhPassword'] = ""
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "NATS.IO Java Server Runner"
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        if (!OperatingSystem.current().isWindows()) {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if (isRelease) {
    signing {
        sign configurations.archives
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.getProperty('ossrhUsername')
            password = project.getProperty('ossrhPassword')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = rootProject.name
                packaging = 'jar'
                groupId = group
                artifactId = archivesBaseName
                description = 'Java NATS.io server runner.'
                url = 'https://github.com/nats-io/java-nats-server-runner'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "synadia"
                        name = "Synadia"
                        email = "info@synadia.com"
                        url = "https://nats.io"
                    }
                }
                scm {
                    url = 'https://github.com/nats-io/java-nats-server-runner'
                }
            }
        }
    }
}